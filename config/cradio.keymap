// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions

#define BASE 0
#define SYMNAV 1
#define NUM 2
#define GAME0 4
#define GAME1 5

&sk { quick-release; };

/ {
    behaviors {
        conditional_layers {
            compatible = "zmk,conditional-layers";

            tri_layer {
                if-layers = <1 2>;
                then-layer = <3>;
            };
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
            layers = <0 1 2 3 4 5>;
        };

        alt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <7 8>;
            layers = <0 2 1 3 4 5>;
        };

        gui {
            bindings = <&kp LEFT_WIN>;
            key-positions = <21 22>;
            layers = <0 2 3 1 4 5>;
        };

        steno_tog {
            bindings = <&tog 6>;
            key-positions = <22 23 26 27>;
            layers = <0 6>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <32 33>;
            layers = <0 2 1 3 4 5>;
        };

        shutdown {
            bindings = <&tog 7>;
            key-positions = <12 13 7 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W  &kp F  &kp P      &kp G        &kp J      &kp L       &kp U      &kp Y    &kp SQT
&kp A        &kp R  &kp S  &kp T      &kp D        &kp H      &kp N       &kp E      &kp I    &kp O
&mt LCTRL Z  &kp X  &kp C  &kp V      &kp B        &kp K      &kp M       &kp COMMA  &kp DOT  &mt LCTRL SLASH
                           &lt 1 ESC  &kp SPACE    &sk LSHFT  &lt 2 BSPC
            >;
        };

        symnav_layer {
            bindings = <
&trans    &kp LBKT  &kp LEFT_BRACE   &kp LEFT_PARENTHESIS  &kp PRCNT           &kp CARET     &kp AMPS   &kp ASTRK     &kp MINUS  &kp UNDER
&kp PIPE  &kp RBKT  &kp RIGHT_BRACE  &kp RPAR              &kp TILDE           &kp LEFT      &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp COLON
&kp BSLH  &none     &none            &none                 &kp GRAVE           &kp SEMI      &kp EXCL   &kp PLUS      &kp EQUAL  &trans
                                     &trans                &kp C_PLAY_PAUSE    &kp LC(BSPC)  &kp ENTER
            >;
        };

        num_layer {
            bindings = <
&kp LESS_THAN  &kp PLUS      &kp HASH      &kp DOLLAR         &kp PERCENT    &kp CARET     &kp AMPERSAND    &kp ASTERISK  &kp MINUS  &kp GREATER_THAN
&kp NUMBER_1   &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4       &kp N5         &kp NUMBER_6  &kp N7           &kp N8        &kp N9     &kp N0
&kp AT_SIGN    &kp DOT       &kp COMMA     &kp DOUBLE_QUOTES  &kp EQUAL      &kp SEMI      &kp EXCLAMATION  &trans        &trans     &trans
                                           &trans             &kp ENTER      &tog 4        &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset   &trans  &bt BT_DISC 0  &out OUT_TOG    &bt BT_SEL 0    &kp F1  &kp F2   &kp F3   &kp F4   &sys_reset
&bootloader  &trans  &bt BT_DISC 1  &bt BT_CLR_ALL  &bt BT_SEL 1    &kp F5  &kp F6   &kp F7   &kp F8   &bootloader
&trans       &trans  &bt BT_DISC 2  &bt BT_CLR      &bt BT_SEL 2    &kp F9  &kp F10  &kp F11  &kp F12  &trans
                                    &trans          &trans          &trans  &trans
            >;
        };

        game0_layer {
            bindings = <
&kp TAB       &kp Q  &kp X  &kp E  &kp R        &kp CARET  &kp AMPS   &kp ASTRK  &kp MINUS  &kp UNDER
&kp LSHFT     &kp A  &kp W  &kp D  &kp F        &kp LARW   &kp DARW   &kp UARW   &kp RARW   &kp COLON
&kp LEFT_ALT  &kp Z  &kp S  &kp C  &kp V        &kp SEMI   &kp EXCL   &kp PLUS   &kp EQUAL  &trans
                            &mo 5  &kp SPACE    &tog 4     &kp ENTER
            >;
        };

        game1_layer {
            bindings = <
&kp ESCAPE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp T     &kp CARET     &kp AMPS   &kp ASTRK  &kp MINUS  &kp UNDER
&kp I       &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp G     &kp LARW      &kp DARW   &kp UARW   &kp RARW   &kp COLON
&kp P       &kp N7        &kp N8        &kp N9        &kp M     &kp SEMI      &kp EXCL   &kp PLUS   &kp EQUAL  &trans
                                        &trans        &trans    &kp LC(BSPC)  &kp ENTER
            >;
        };

        steno {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T    &kp Y  &kp U  &kp I  &kp O  &kp P
&kp A  &kp S  &kp D  &kp F  &kp G    &kp H  &kp J  &kp K  &kp L  &kp SEMI
&none  &none  &none  &none  &none    &none  &none  &none  &none  &none
                     &kp C  &kp V    &kp B  &kp N
            >;
        };

        layer_7 {
            bindings = <
&none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none    &none  &none  &none  &none  &none
&none  &none  &none  &none  &none    &none  &none  &none  &none  &none
                     &none  &none    &none  &none
            >;
        };
    };
};
